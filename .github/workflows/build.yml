#
# Copyright (c) 2021-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

name: Build

on:
  push:
    branches:
      - 'master'

    tags:
      - '*'

  pull_request:
    branches:
      - '*'

env:
  # Indicates the location of the vcpkg as a Git submodule of the project repository.
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  # Tells vcpkg where binary packages are stored.
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
  # Use specific vcpkg version
  VCPKG_COMMIT_ID: '9836ae4f2671db41e07843f31b4e341f0d3ebfb1'
  # Setup compiler
  CC: clang-12
  CXX: clang++-12

jobs:
  build_linux:
    strategy:
      fail-fast: false
      matrix:
        image:
          - { name: 'ubuntu', tag: '20.04' }

        llvm: [ '14' ]
        cxxcommon_version: [ 'v0.2.2' ]

    runs-on: ubuntu-20.04

    timeout-minutes: 15

    container:
      image: docker.pkg.github.com/lifting-bits/cxx-common/vcpkg-builder-${{ matrix.image.name }}:${{ matrix.image.tag }}

      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    # setup environment
    - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
      run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash

    - name: Install dependencies
      shell: bash
      run: |
        apt-get update
        apt-get install --yes --no-install-recommends \
          clang-12 build-essential ninja-build ccache libstdc++-10-dev

        update-alternatives \
            --install /usr/bin/clang clang /usr/bin/clang-12 10 \
            --slave   /usr/bin/clang++ clang++ /usr/bin/clang++-12

    - name: Setup paths
      shell: bash
      id: paths
      run: |
        mkdir -p build src install ccache
        echo ::set-output name=src::$(pwd)/src
        echo ::set-output name=build::$(pwd)/build
        echo ::set-output name=install::$(pwd)/install
        echo ::set-output name=ccache::$(pwd)/ccache

    - name: Get latest CMake and ninja
      uses: xlauko/get-cmake@main

    # setup cxx-common
    - name: Download cxx-common
      id: cxxcommon
      uses: lifting-bits/download-cxx-common@v1
      with:
        llvm: ${{ matrix.llvm }}
        version: ${{ matrix.cxxcommon_version }}
        token: ${{ secrets.GITHUB_TOKEN }}
        image: ${{ matrix.image.name }}
        image_tag: ${{ matrix.image.tag }}
        destination: ${{ steps.paths.outputs.install }}

    # TODO(Heno) temporary download cxx-common ports
    - name: Clone the cxx-common ports
      id: cxx-common-ports
      uses: actions/checkout@v3
      with:
        repository: 'lifting-bits/cxx-common'
        path: ${{ steps.paths.outputs.src }}/cxx-common-ports
        ref: 'port-files'
        fetch-depth: 1

    # # setup gap
    # - name: Clone the gap repository
    #   uses: actions/checkout@v3
    #   with:
    #     repository: 'lifting-bits/gap'
    #     path: ${{ steps.paths.outputs.src }}/gap
    #     submodules: true
    #     fetch-depth: 1

    # # setup vcpkg for gap
    # - name: Setup vcpkg
    #   uses: lukka/run-vcpkg@v10
    #   with:
    #     vcpkgDirectory: ${{ steps.paths.outputs.install }}/vcpkg
    #     vcpkgGitCommitId: '${{ env.VCPKG_COMMIT_ID }}'
    #     vcpkgJsonGlob: vcpkg.json

    # - name: Configure gap
    #   working-directory: ${{ steps.paths.outputs.src }}/gap
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}
    #   run: |
    #     cmake \
    #       -G Ninja \
    #       -S . \
    #       -B ${{ steps.paths.outputs.build }}/gap \
    #       -DCMAKE_VERBOSE_MAKEFILE=true \
    #       -DGAP_ENABLE_COROUTINES=OFF \
    #       -DENABLE_TESTING=OFF \
    #       -DENABLE_EXAMPLES=OFF \
    #       -DVCPKG_ROOT=${{ steps.paths.outputs.install }}/vcpkg \
    #       -DCMAKE_INSTALL_PREFIX=${{ steps.paths.outputs.install }}/gap

    # - name: Build gap
    #   working-directory: ${{ steps.paths.outputs.src }}/gap
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}
    #   run: |
    #     cmake --build ${{ steps.paths.outputs.build }}/gap -j $(nproc)

    # - name: Install gap
    #   working-directory: ${{ steps.paths.outputs.src }}/gap
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}
    #   run: |
    #     cmake --build ${{ steps.paths.outputs.build }}/gap --target install

    # # setup remill
    # - name: Clone the remill repository
    #   uses: actions/checkout@v3
    #   with:
    #     repository: 'lifting-bits/remill'
    #     path: ${{ steps.paths.outputs.src }}/remill
    #     submodules: true
    #     fetch-depth: 1

    # - name: Configure remill
    #   working-directory: ${{ steps.paths.outputs.src }}/remill
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}
    #   run: |
    #     cmake \
    #       -G Ninja \
    #       -S . \
    #       -B ${{ steps.paths.outputs.build }}/remill \
    #       -DCMAKE_VERBOSE_MAKEFILE=true \
    #       -DVCPKG_ROOT=${{ steps.cxxcommon.outputs.path }} \
    #       -DVCPKG_TARGET_TRIPLET=x64-linux-rel \
    #       -DCMAKE_INSTALL_PREFIX=${{ steps.paths.outputs.install }}/remill

    # - name: Build remill
    #   working-directory: ${{ steps.paths.outputs.src }}/remill
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}
    #   run: |
    #     cmake --build ${{ steps.paths.outputs.build }}/remill -j $(nproc)

    # - name: Install remill
    #   working-directory: ${{ steps.paths.outputs.src }}/remill
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}
    #   run: |
    #     cmake --build ${{ steps.paths.outputs.build }}/remill --target install

    # setup circuitous
    - name: Clone the circuitous repository
      uses: actions/checkout@v3
      with:
        path: ${{ steps.paths.outputs.src }}/circuitous
        submodules: true
        fetch-depth: 1

    - name: Install circuitous python requirements
      working-directory: ${{ steps.paths.outputs.src }}/circuitous
      shell: bash
      run: |
          pip install --no-cache-dir -r requirements.txt

    - name: Configure circuitous
      working-directory: ${{ steps.paths.outputs.src }}/circuitous
      shell: bash
      env:
        # TODO(Heno): use ports from
        CXX_COMMON_ROOT: ${{ steps.paths.outputs.src }}/cxx-common-ports
        CMAKE_PREFIX_PATH: :$CMAKE_PREFIX_PATH
      run: |
        ls ${{ steps.cxxcommon.outputs.path }}
        cmake --preset ninja-multi-linux-cxx-common \
          -DCMAKE_VERBOSE_MAKEFILE=true \
          -DGAP_ENABLE_COROUTINES=OFF \
          -DCMAKE_INSTALL_PREFIX=${{ steps.paths.outputs.install }}/circuitous

    # - name: Configure circuitous
    #   working-directory: ${{ steps.paths.outputs.src }}/circuitous
    #   shell: bash
    #   run: |
    #     cmake \
    #       -G Ninja \
    #       -S . \
    #       -B ${{ steps.paths.outputs.build }}/circuitous \
    #       -DVCPKG_MANIFEST_MODE=OFF \
    #       -DCMAKE_VERBOSE_MAKEFILE=true \
    #       -DVCPKG_TARGET_TRIPLET=x64-linux-rel \
    #       -DVCPKG_ROOT="${{ steps.cxxcommon.outputs.path }}" \
    #       -Dremill_DIR:PATH=${{ steps.paths.outputs.install }}/remill/lib/cmake/remill/ \
    #       -DGAP_ENABLE_COROUTINES=OFF \
    #       -Dgap_DIR:PATH=${{ steps.paths.outputs.install }}/gap/lib/cmake/gap/ \
    #       -DCMAKE_INSTALL_PREFIX=${{ steps.paths.outputs.install }}/circuitous

    # - name: Build circuitous
    #   working-directory: ${{ steps.paths.outputs.build }}/circuitous
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}

    #   run: |
    #     cmake --build ${{ steps.paths.outputs.build }}/circuitous -j $(nproc)

    # - name: Install circuitous
    #   working-directory: ${{ steps.paths.outputs.build }}/circuitous
    #   env:
    #     CCACHE_DIR: ${{ steps.paths.outputs.ccache }}
    #   run: |
    #     cmake --build ${{ steps.paths.outputs.build }}/circuitous --target install

    # - name: Run circuitous unittests
    #   working-directory: ${{ steps.paths.outputs.build }}/circuitous
    #   run: |
    #     ctest
