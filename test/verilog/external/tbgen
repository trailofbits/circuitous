#!/usr/bin/env ruby

# tbgen: generate a Verilog testbench for a combinational circuit

require "pathname"
require "yaml"

require_relative "common"

def usage
  puts "Usage: tbgen [--verbose] <spec>"
end

def emit_tb(spec)
  test_vector_size = [*spec[:inputs], *spec[:outputs]].map(&:size).sum

  spec[:tb_file].open("w") do |tb_io|
    tb_io.puts <<~HEADER
      // this file was generated by #{__FILE__}
      // do NOT edit it by hand
    HEADER

    tb_io.puts "module #{spec[:module]}_tb();"

    # housekeeping variables.
    tb_io.puts "reg clk, reset;"
    tb_io.puts "reg [31:0] current_vec, error_count;"
    tb_io.puts "reg [#{test_vector_size - 1}:0] test_vectors [#{MAX_TEST_VECTORS - 1}:0];"

    # inputs.
    spec[:inputs].each do |input|
      tb_io.puts "reg #{input.width_spec} #{input.name};"
    end

    # outputs and expected outputs.
    spec[:outputs].each do |output|
      tb_io.puts "reg #{output.width_spec} exp_#{output.name};"
      tb_io.puts "wire #{output.width_spec} #{output.name};"
    end

    # wire the module under test up to its inputs and outputs.
    instantiate_module tb_io, spec

    # clock generation for each test vector.
    tb_io.puts <<~VERILOG
      always
        begin
          clk = 1; #5; clk = 0; #5;
        end
    VERILOG

    # prime test vectors, housekeeping variables.
    readmem = "$readmemb"
    tb_io.puts <<~VERILOG
      initial
        begin
          $dumpfile("#{spec[:module]}.tb.vcd");
          $dumpvars(0, #{spec[:module]}_tb);
          #{readmem}("#{spec[:tv_file]}", test_vectors);
          current_vec = 0; error_count = 0;
          reset = 1; #10; reset = 0;
        end
    VERILOG

    # unpack inputs and expected outputs.
    unpack_list = [*spec[:inputs].map(&:name), spec[:outputs].map { |o| "exp_#{o.name}" }].join(", ")
    tb_io.puts <<~VERILOG
      always @(posedge clk)
        begin
          #1; { #{unpack_list} } = test_vectors[current_vec];
        end
    VERILOG

    # actual comparisons.
    checks = spec[:outputs].map do |output|
      <<~VERILOG
        if (exp_#{output.name} === #{output.name} || exp_#{output.name} === #{output.size}'bx) begin
          $display("TBGEN-PASS #{spec[:module]}:%0d #{output.name}", current_vec);
        end else begin
          $display("TBGEN-FAIL #{spec[:module]}:%0d expected #{output.name} to be 0x%h, was 0x%h", current_vec, exp_#{output.name}, #{output.name});
          error_count = error_count + 1;
        end
      VERILOG
    end.join("\n")
    tb_io.puts <<~VERILOG
      always @(negedge clk)
        begin
          if (~reset) begin
            #{checks}
            current_vec = current_vec + 1;

            if (test_vectors[current_vec] === #{test_vector_size}'bx) begin
              $display("TBGEN-DONE #{spec[:module]} %0d errors=%0d", current_vec, error_count);
              $finish;
            end
          end
        end
    VERILOG

    tb_io.puts "endmodule"
  end
end

def instantiate_module(tb_io, spec)
  tb_io.puts "#{spec[:module]} dut("

  assign = [*spec[:inputs], *spec[:outputs]].map do |wire|
    ".#{wire.name}(#{wire.name})"
  end.join(",\n")
  tb_io.puts assign

  tb_io.puts ");"
end

if HELP
  usage
  exit
end

spec = ARGV.shift
if spec.nil?
  usage
  exit 1
end

spec = Pathname.new spec
barf "#{spec} must be a file" unless spec.file?

spec_dir = spec.dirname
verbose "directory for all relative spec paths: #{spec_dir}"

spec = YAML.safe_load File.read(spec), symbolize_names: true
verbose "loaded #{spec}"

fixup_spec! spec_dir, spec
emit_tb spec
