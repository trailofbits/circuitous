# Copyright (c) 2021 Trail of Bits, Inc.

import argparse
import json
import os
import subprocess
import tempfile
import threading
import queue
import sys
import re

from tools.tc import State, Test, TraceTest
import tools.tc as TC

import defs.fetch_defs

import tools.model_test as mp

from tools.execute import run_multitrace
from tools.result import ResultValue, ResultAccumulator
from tools.circuit import RawCircuit

circuitous_prefix = "@PROJECT_BINARY_DIR@/bin"

circuitous_run=os.path.abspath(os.path.join(circuitous_prefix, "run/circuitous-run"))
circuitous_lift=os.path.abspath(os.path.join(circuitous_prefix, "lift/circuitous-lift"))
top_level_dir=None

dbg_verbose = False
interpreter_death = False

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    RESET = '\033[0m'

def end_color():
    return Colors.RESET

def colorize(color, what):
    return color + what + end_color()

def green(what):
    return colorize(Colors.GREEN, what)

def red(what):
    return colorize(Colors.RED, what)

def yellow(what):
    return colorize(Colors.YELLOW, what)

def log_error(what):
    print("[ ! ]", what)

def log_info(what):
    print("[ > ]", what)

def check_retcode(pipes, component):
    try:
        out, err = pipes.communicate(timeout = 45)
    except subprocess.TimeoutExpired:
        pipes.kill()
        out, err = pipes.communicate()
        raise PipelineFail(component, out, err, "Timeout")
    ret_code = pipes.returncode
    if ret_code != 0:
        raise PipelineFail(component, out, err, "Ret code != 0")

def strip(what):
    out = []
    for x in what:
        if x[0:2] == '--':
            out.append(x[2:])
        elif x[0:1] == '-':
            out.append(x[1:])
    return out

def maybe_hex(what):
    if what is None:
        return str(what)
    return hex(what)


class PipelineFail(Exception):
    def __init__(self, component, out="", err="", cause=None):
        self._out = out
        self._err = err
        self._component = component
        self._cause = cause

    def __str__(self):
        msg = "Pipeline fail in: " + self._component + '\n'
        msg += "Cause: " + "Unknown" if self._cause is None else self._cause + '\n'
        msg += "Stdout:\n" + self._out + '\n'
        msg += '\n-----\n'
        msg += "Stderr:\n" + self._err + '\n'
        return msg


class SimulateCWDMixin():
    def locate(self, target):
        return os.path.join(self.test_dir, target)

class Lifter(SimulateCWDMixin):
    __slots__ = ('binary', 'test_dir')

    component = "circuitous lifter"

    def __init__(self, test_dir_, binary=circuitous_lift):
        self.binary = binary
        self.test_dir = test_dir_

    def lift_test(self, tc, extra_args):
        for case in tc.cases:
            bytes = case.bytes
            circuit = self.locate(self.circuit_name(bytes))
            log_info("Lifting: " + '.' * 16 + " " + tc.name + " -> " + case.name)
            if not circuit in tc.metafiles:
                if dbg_verbose:
                    log_info(case.bytes)
                tc.metafiles[circuit] = self.lift(case.bytes, tc.extra_lift_opts() + extra_args)
            else:
                log_info("\tSkipped")
            tc.metafiles[case.name + ".circuit"] = circuit

    def shorten_name(self, bytes):
        if len(bytes) < 32:
            return str(bytes)
        return str(hash(str(bytes)))


    def circuit_name(self, bytes):
        return self.shorten_name(bytes) + ".circuit.ir"

    def lift(self, bytes, extra_args):
        args = [self.binary,
                "--os", "macos",
                "--log-dir", self.test_dir,
                "--bytes-in", bytes,
                "--json-out", self.locate("out.json"),
                "--ir-out", self.locate(self.circuit_name(bytes))]
        if dbg_verbose:
            args += ["--dot-out", self.locate(self.circuit_name(bytes) + ".dot")]
            args += ["--dbg"]
        else:
            args += ["--quiet"]
        args += extra_args
        pipes = subprocess.Popen(args,
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                 text=True)
        check_retcode(pipes, self.component)

        return self.locate(self.circuit_name(bytes))

class Interpreter(SimulateCWDMixin):
    __slots__ = ('binary', 'test_dir')

    component = "circuitous interpret"

    def __init__(self, test_dir_, binary=circuitous_run):
        self.binary = binary
        self.test_dir = test_dir_

    def run(self, tc):
        out = {}
        for case in tc.cases:
            out[case] = self.run_case(case, tc.metafiles[case.name + ".circuit"], tc)
        return out

    def create_trace_json(self, case, prefix, dir=None):
        fname = prefix + ".trace.json"
        path = self.locate(fname)

        obj = case.as_json()
        with open(path, 'w') as out:
            json.dump(obj, out, indent=4)
        return path


    def run_case(self, case, ir, parent):
        args = [self.binary,
                "--verify",
                "--log-dir", self.test_dir,
                "--traces", self.create_trace_json(case, case.name, self.test_dir),
                "--export-derived", self.locate(case.name + ".result.json"),
                "--ir-in", ir]
        if dbg_verbose:
            args += ["--dot-out", self.locate(case.name + ".result.dot")]
            args += ["--logtostderr"]
            args += ["--dbg"]
            parent.metafiles[case.name + ".result.dot"] = self.locate(case.name + ".result.dot")
        if interpreter_death:
            args += ["--die"]
        log_info("Running: " + '.' * 16 + " " + parent.name + " -> " + case.name)
        pipes = subprocess.Popen(args,
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                 text=True)
        try:
            check_retcode(pipes, self.component)
        except PipelineFail as e:
            if dbg_verbose:
                e._cause += "\n" + " ".join(args)
            raise e

        parent.metafiles[case.name + ".result.json"] = self.locate(case.name + ".result.json")

        return self.parse_result(self.locate(case.name + ".result.json"))

    def get_mem_hints(self, mem_hints):
        out = set()
        for _, hint in mem_hints.items():
            out.add((int(hint["used"], 16),
                     int(hint["addr"], 16),
                     int(hint["value"], 16),
                     int(hint["mode"], 16),
                     int(hint["size"], 16),
                     int(hint["ts"], 16)))
        return out

    def parse_result(self, path):
        with open(path) as f:
            as_json = json.load(f)
            result = as_json["result"]

            traces = as_json["traces"]
            assert(len(traces) == 1)

            mem_hints = self.get_mem_hints(traces["0"]["memory_hints"])

            return (result, mem_hints)

class TestResult:
    ok = 0
    fail = 1
    error = 2

    __slots__ = ('status', 'msg', 'error_exception')

    def __init__(self, status_, msg_="", error_exception_=None):
        self.status = status_
        self.msg = msg_
        self.error_exception = error_exception_

    def __bool__(self):
        return self.status == self.ok

    # TODO(lukas): Want to get unpack, did not wanna bother with __iter__
    def as_tuple(self):
        return (self.status, self.msg, self.error_exception)

class Comparator(SimulateCWDMixin):
    def __init__(self, test_dir_):
        self.test_dir = test_dir_

    def compare_case(self, case, result, mem_hints):
        assert(result in ["accept", "reject"])

        if case.expected.result:
            message = "Expected: " + "accept" + " instead got: " + result + '\n'
        else:
            message = "Expected: " + "reject" + " instead got: " + result + '\n'

        if not case.expected.result:
            return result == "reject", message

        # Expected to accept
        if result == "reject":
            return False, message

        c, m = self.mem_hint_compare(case.expected.mem_hints, mem_hints)
        if not c:
            return c, message + m

        return True, ""

    def mem_hint_compare(self, expected, real):
        used = set()
        for item in real:
            if item[0] != 0:
                used.add(item)

        e = set()
        for item in expected:
            e.add(item.as_tuple())

        message = "Expected:\n" + str(e)
        message += "\nGot:\n" + str(used)

        return e == used, message

    def compare(self, tc, real):
        out = {}
        for case in tc.cases:
            r, m = real[case]
            if r == "error":
                out[case] = ResultValue.make_error('Result: Error', None)
                continue
            accept, msg = self.compare_case(case, r, m)
            if accept:
                out[case] = ResultValue.make_pass()
            else:
                out[case] = ResultValue.make_fail(msg, None)

            if not out[case]:
                msg = out[case].msg
                msg += "\n\tLift bytes: " + tc._bytes
                msg += "\n\tRun bytes: " + case.input.bytes
                # TODO(lukas): Not sure how to fix cleanly (threads broke it)
                if dbg_verbose:
                    msg += "\n\t" + case.bytes
                    msg += "\n\t" + case.input.bytes
                    msg += "\n\t" + tc.metafiles[case.name + ".circuit"]
                    msg += "\n\t" + tc.metafiles[case.name + ".result.json"]
                    msg += "\n\t" + tc.metafiles[case.name + ".result.dot"]
                out[case].msg = msg
        return out

class Results:
    __slots__ = ('results', 'fails', 'fragile')

    def __init__(self, fragile_=False):
        self.results = {"pass" : 0, "fail" : 0, "error" : 0}
        self.fails = []
        self.fragile = fragile_

    def process(self, results, test_name):
        for name, result in results.items():
            verdict, message, e = result.as_tuple()
            full_name = test_name + " -> " + name
            if verdict == TestResult.fail:
                self.failed(full_name, message)
                self.results["fail"] += 1
            elif verdict == TestResult.ok:
                self.ok()
                self.results["pass"] += 1
            elif verdict == TestResult.error:
                self.results["error"] += 1
                if e is not None:
                    print(yellow(test_name + ": Pipeline fail in: " + e._component))
                else:
                    print(yellow(test_name + ": error: " + message))
                if dbg_verbose:
                    print(e)


    def failed(self, name, message):
        print(red("[" + name + "]"), "\n", message)
        self.fails.append(name)

    def ok(self):
        pass

    def error(self, tc, e):
        if self.fragile:
            raise e
        self.results["error"] += len(tc.cases)
        print(yellow(tc.name + ": Pipeline fail in: " + e._component))


    def report(self):
        log_info("Results:")
        for x in self.fails:
            log_info("F: " + x)
        # TODO(lukas): Bleh, rework when we are certain the
        #              categories won't change much.
        out = { "pass" : 0 , "fail" : 0, "error" : 0 }
        for x in ["pass", "fail", "error"]:
            message = "\t" + x + " : " + str(self.results[x])
            if x == "fail" and self.results[x] != 0:
                message = red(message)
            if x == "pass" and self.results[x] == sum(self.results.values()):
                message = green(message)
            if x == "error" and self.results[x] != 0:
                message = yellow(message)
            out[x] += self.results[x]
            print(message)
        return out

def set_compiler():
    log_info("Setting circuit compiler to: " + circuitous_lift)
    assert os.path.exists(circuitous_lift)
    RawCircuit.runner = circuitous_lift

# Return number of tests that *did not* pass.
def execute_tests(tests, top_dir, extra_args, fragile, jobs):
    log_info("Test dir is: " + top_dir)
    set_compiler()
    os.chdir(top_dir)
    global top_level_dir
    top_level_dir = os.path.abspath(top_dir)

    results = queue.Queue()
    todo = queue.Queue()

    for x in tests:
        x.generate(lift=strip(extra_args))
        x.resolve_undefs()
        todo.put(x)

    def parallel_exec():
        while not todo.empty():
            x = None
            try:
                x = todo.get()
            except queue.Empty:
                return


            test_dir = tempfile.mkdtemp(dir=os.getcwd(),
                                        prefix=x.name.replace(' ', '.').replace('/', '.') + '_')
            test_dir = os.path.abspath(test_dir)
            if isinstance(x, TraceTest):
                results.put(run_multitrace(x, test_dir, circuitous_run, die=interpreter_death))
                continue

            try:
                Lifter(test_dir).lift_test(x, extra_args)
                r = Comparator(test_dir).compare(x, Interpreter(test_dir).run(x))
                results.put((x, None, r))
            except PipelineFail as e:
                results.put((x, ResultValue.make_error('Component runtime err', str(e)), None))
                if fragile and jobs == 1:
                    raise e

    threads = []
    for i in range(jobs):
        t = threading.Thread(target=parallel_exec)
        t.start()
        threads.append(t)
    for t in threads:
        t.join()

    rs = ResultAccumulator()
    while not results.empty():
        try:
            r = results.get()
        except queue.Empty:
            break
        rs.add(r)
    print(rs.results(1))
    return rs.succeeded()



# TODO(lukas): Mocking this one for now
def fetch_test(sets):
    return defs.fetch_defs.fetch(sets)


def filter_by_tag(sets, tags):
    include_todo = "todo" in tags
    skipped_todos = 0

    log_info("Filtering " + str(len(sets)) + " tests by " + str(tags))

    positive_tags = [x for x in tags if not x.startswith('not_')]
    negative_tags = [x[4:] for x in tags if x.startswith('not_')]
    log_info("Include: " + str(positive_tags))
    log_info("Exclude: " + str(negative_tags))

    result = set()
    for test in sets:
        if test._tags.intersection(negative_tags):
            continue
        if not include_todo and "todo" in test._tags:
            skipped_todos += len(test.cases)
            continue
        if 'all' in tags or test._tags.intersection(positive_tags):
            result.add(test)
    log_info("Skipped " + str(skipped_todos) + " todo tests")
    return result

def filter_by_name(names, prefiltered):
    result = set()

    patterns = [ re.compile(x) for x in names ]

    for test in prefiltered:
        if any([re.match(pattern, test.name) is not None for pattern in patterns]):
            result.add(test)
    return result

def main():
    arg_parser = argparse.ArgumentParser(
        formatter_class = argparse.RawDescriptionHelpFormatter)
    arg_parser.add_argument("--persist",
                            help="Runtime helper directories will not be cleaned.",
                            action='store_true',
                            default=False
                            )
    arg_parser.add_argument("--tags",
                            help="Specify which tags you want to run.",
                            action='extend',
                            nargs='+'
                            )
    arg_parser.add_argument("--sets",
                             help="TODO: Choose which test sets to consider. (not implemented)",
                             action='extend',
                             nargs='+')
    arg_parser.add_argument("--names",
                            help="Run tests with given names (regex search).",
                            action='extend',
                            nargs='+')
    arg_parser.add_argument("--dbg",
                            help="Devtool:Run in dbg mode, which means be verbose.",
                            action='store_true',
                            default=False)
    arg_parser.add_argument("--jobs",
                            help="Number of python threads. Should improve execution time.",
                            default=1)
    arg_parser.add_argument("--fragile",
                            help="If pipeline fails, kill & report",
                            action='store_true',
                            default=False)
    arg_parser.add_argument("--die",
                            help="Devtool: Pass --die to interpreter invocation.",
                            action='store_true',
                            default=False)

    args, command_args = arg_parser.parse_known_args()

    global dbg_verbose
    dbg_verbose = args.dbg

    global interpreter_death
    interpreter_death = args.die

    if args.tags is None:
        args.tags = ['all']
    args.jobs = int(args.jobs)


    if interpreter_death:
        log_info("Overriding --jobs, --dbg and --fragile as result of --die.")
        args.jobs = 1
        args.fragile = True
        args.dbg = True
        dbg_verbose = True


    tests = filter_by_tag(fetch_test(args.sets), args.tags)
    if args.names:
        tests = filter_by_name(args.names, tests)
    if not tests:
        log_error("No tests selected")
        return
    total = 0
    for x in tests:
        total += len(x.cases)
    log_info("Filtered " + str(len(tests)) + " tests with " + str(total) + " cases")
    passed = None
    if args.persist:
        log_info("Creating persistent directory")
        test_dir = tempfile.mkdtemp(dir=os.getcwd())
        passed = execute_tests(tests, test_dir, command_args, args.fragile, args.jobs)
    else:
        log_info("Creating temporary directory")
        with tempfile.TemporaryDirectory(dir=os.getcwd()) as tmpdir:
            passed = execute_tests(tests, tmpdir, command_args, args.fragile, args.jobs)
    return passed


if __name__ == "__main__":
    x = main()
    if x is None:
        sys.exit(2)
    elif x == False:
        sys.exit(1)
    else:
        sys.exit(0)
